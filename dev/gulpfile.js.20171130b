//#-------------------------------------------------- BEGIN [gulp file for SGP Project] - (25-10-2017 - 16:51:17) {{
//npm i -g gulp@git://github.com/gulpjs/gulp.git

var gulp = require('gulp');
var gulpBrowser = require("gulp-browser");
var reactify = require('reactify');
var del = require('del');
var size = require('gulp-size');
var plumber = require('gulp-plumber');
var cssnano = require('gulp-cssnano');
var rename = require('gulp-rename');
var uglify = require('gulp-uglify-es').default;
var pump = require('pump');
var strip = require('gulp-strip-comments');
//var cleanCSS = require("gulp-clean-css");
var runSequence = require("run-sequence");
var autoprefixer = require("gulp-autoprefixer");
var spawn = require('child_process').spawn;
//var restart = require('gulp-restart');
//var autoreload = require("autoreload-gulp");
//const babel = require('gulp-babel');

var jsxFilesDir = './dev/jsx/*.js';
var jsOutPutDir = './static/js/chat';

var cssFilesDir = './dev/css/chat/*.css';
var cssOutPutDir = './static/css/chat';
var cssFile = './static/css/chat/chatCORS.css';
var jsFile = './static/js/chat/chatCORS.js';
var p;

// tasks
gulp.task('del', function () {
  return del([jsOutPutDir]);
});

//gulp.task('default', function () {
gulp.task('gulp-reload', function(){
    //spawn('gulp', ['watch'], {stdio: 'inherit'});
    if(p){
        p.kill();
    }
    //p = spawn('gulp', ['watch'], {stdio: 'inherit'});
    p = spawn(process.argv[0],[process.argv[1]],{stdio: 'inherit'});
    process.exit();
});

//#-------------------------------------------------- BEGIN [watcher] - (30-11-2017 - 17:34:45) {{
gulp.task('watch', function() {
  //const restartingGulpProcessCmd = 'while true; do gulp watch2 --colors; done;';
  const restartingGulpProcessCmd = 'cmd /c gulp watch2';
  const restartingGulpProcess = require('child_process').exec(restartingGulpProcessCmd);
  restartingGulpProcess.stdout.pipe(process.stdout);
  restartingGulpProcess.stderr.pipe(process.stderr);
});
//#-------------------------------------------------- END   [watcher] - (30-11-2017 - 17:34:45) }}


//gulp.task('watch2', ['del'], function () {
gulp.task('default', ['del'], function () {
    gulp.start('transformJSAndDist');
    gulp.watch(jsxFilesDir, ['transformJSAndDist']);
    gulp.watch(cssFilesDir, ['compressCss']);
    gulp.watch('gulpfile.js', ['gulp-reload']);
    gulp.watch('./gulpfile.jsx').on('change' ,function(){
        //var p;
        var childProcess = require('child_process');
        if(process.platform === 'win32'){
            if(p){
                childProcess.exec('taskkill /PID' + p.id + ' /T /F', function(){});
                p.kill();
                console.log("########### kill!!!!!");
            }else{
                console.log("########### aassign!!!!!");

                p = childProcess.spawn(process.argv[0],[process.argv[1]],{stdio: 'inherit'});
                //p.kill()
                //console.log("########### p.id: "+  p);
            }
        }
    });
    //gulp.watch('gulpfile.js', ['default']);
    //gulp.watch(['gulpfile.js'], restart);
});

//gulp.task('watch', function () {
    //gulp.watch('gulpfile.js', ['gulp-reload']);
//});

//gulp.task('default', ['watch']);
//gulp.task('default', autoreload('watch'));

//##############################################################################

gulp.task('transferCss', function(){
    var stream = gulp.src(cssFilesDir)
        .pipe(strip.text({trim:true}))
        .pipe(autoprefixer())
        .pipe(gulp.dest(cssOutPutDir))
        .pipe(size())
    return stream;
});

gulp.task('compressCss', ["transferCss"], function(){
    var stream = gulp.src(cssFile)
        .pipe(cssnano())
        .pipe(rename({suffix:'.min'}))
        .pipe(gulp.dest(cssOutPutDir))
        .pipe(size())
    return stream;
});

gulp.task('delJSFile', function () {
    return del([jsFile]);
});

function pumpCb(err) {
    if (err) {
        console.log('GULP-Error: ', err.toString());
        //runSequence('delJSFile');
        runSequence('del');
    }
    this.emit('end');
    //this.end();
}
///*
var origSrc = gulp.src;
gulp.src = function () {
    return fixPipe(origSrc.apply(this, arguments));
};
function fixPipe(stream) {
    var origPipe = stream.pipe;
    stream.pipe = function (dest) {
        arguments[0] = dest.on('error', function (error) {
            var nextStreams = dest._nextStreams;
            if (nextStreams) {
                nextStreams.forEach(function (nextStream) {
                    nextStream.emit('error', error);
                });
            } else if (dest.listeners('error').length === 1) {
                throw error;
            }
        });
        var nextStream = fixPipe(origPipe.apply(this, arguments));
        (this._nextStreams || (this._nextStreams = [])).push(nextStream);
        return nextStream;
    };
    return stream;
}  /**/


gulp.task('transform', function () {
    var s = strip({});
    s.on('error',function(e){
        console.log(e);
        s.end();
    });
    var stream = gulp.src(jsxFilesDir)
                .pipe(plumber())
                .pipe(gulpBrowser.browserify({transform: ['reactify']}))

                .pipe(gulp.dest(jsOutPutDir))
                .on('error', pumpCb)
                .pipe(strip())
                //.pipe(s)
                .pipe(gulp.dest(jsOutPutDir))
                .pipe(size());

    return stream;
});



gulp.task('transformJS', function(pumpCb){
    pump([
        gulp.src(jsxFilesDir)
        ,plumber()
        ,gulpBrowser.browserify({transform: ['reactify']})
        //,strip()
        ,gulp.dest(jsOutPutDir)
        ,size()
    ], pumpCb);

});

gulp.task('transformJSAndDist', ['transform'], function (cb) {
  pump([
      gulp.src(jsFile),
      uglify(),
      rename({suffix:'.min'}),
      gulp.dest(jsOutPutDir)
    ], cb);
});

gulp.task('prod', function(){
    runSequence('compressCss','transformJSAndDist');
});

//#-------------------------------------------------- END   [gulp file for SGP Project] - (25-10-2017 - 16:51:17) }}
