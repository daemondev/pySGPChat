wmic os get caption
wmic os get osarchitecture

security:
   authorization: enabled
    javascriptEnabled: true
systemLog:
   destination: file
   path: "/var/log/mongodb/mongod.log"
   logAppend: true
storage:
   dbPath: <string>
   indexBuildRetry: <boolean>
   repairPath: <string>
   journal:
      enabled: <boolean>
      commitIntervalMs: <num>
   directoryPerDB: <boolean>
   syncPeriodSecs: <int>
   engine: <string>
processManagement:
   fork: true
net:
   bindIp: 127.0.0.1
   port: 27017
   http:
        enabled: <boolean>
        JSONPEnabled: <boolean>
        RESTInterfaceEnabled: <boolean>
setParameter:
   enableLocalhostAuthBypass: false
processManagement:
   windowsService:
      serviceName: <string>
      displayName: <string>
      description: <string>
      serviceUser: <string>
      servicePassword: <string>

-------------------------------------------------------------------
-------------------------------------------------------------------
auth
-------------------------------------------------------------------
systemLog:
    destination: file
    path: c:\data\log\mongod.log
storage:
    dbPath: c:\data\db
-------------------------------------------------------------------
security:
   keyFile: <string>
   clusterAuthMode: <string>
   authorization: <string>
   transitionToAuth: <boolean>
   javascriptEnabled:  <boolean>
   redactClientLogData: <boolean>
   sasl:
      hostName: <string>
      serviceName: <string>
      saslauthdSocketPath: <string>
   enableEncryption: <boolean>
   encryptionCipherMode: <string>
   encryptionKeyFile: <string>
   kmip:
      keyIdentifier: <string>
      rotateMasterKey: <boolean>
      serverName: <string>
      port: <string>
      clientCertificateFile: <string>
      clientCertificatePassword: <string>
      serverCAFile: <string>
   ldap:
      servers: <string>
      bind:
         method: <string>
         saslMechanism: <string>
         queryUser: <string>
         queryPassword: <string>
         useOSDefaults: <boolean>
      transportSecurity: <string>
      timeoutMS: <int>
      userToDNMapping: <string>
      authz:
         queryTemplate: <string>



storage.directoryPerDB
    Type: boolean
    Default: False
    When true, MongoDB uses a separate directory to store data for each database. The directories are under the storage.dbPath directory, and each subdirectory name corresponds to the database name.
    Changed in version 3.0: To change the storage.directoryPerDB option for existing deployments, you must restart the mongod instances with the new storage.directoryPerDB value and a new data directory (storage.dbPath value), and then repopulate the data.
        For standalone instances, you can use mongodump on the existing instance, stop the instance, restart with the new storage.directoryPerDB value and a new data directory, and use mongorestore to populate the new data directory.
        For replica sets, you can update in a rolling manner by stopping a secondary member, restart with the new storage.directoryPerDB value and a new data directory, and use initial sync to populate the new data directory. To update all members, start with the secondary members first. Then step down the primary, and update the stepped-down member.
    The storage.directoryPerDB setting is available only for mongod.
    Not available for mongod instances that use the in-memory storage engine.

mongod.exe --config mongo.cfg --install
sc.exe create MongoDB binPath= "\"C:\Program Files\MongoDB\Server\3.4\bin\mongod.exe\" --service --config=\"C:\Program Files\MongoDB\Server\3.4\mongod.cfg\"" DisplayName= "MongoDB" start= "auto"
 --serviceName and --serviceDisplayName

 sc.exe delete MongoDB
net start MongoDB
net stop MongoDB

mongod.exe --remove

mongod.exe --storageEngine mmapv1 --nojournal --dbpath=D:\\public\db --smallfiles --install --serviceName MongoDB --serviceDisplayName MyMongoDB --logpath D:\\public\mongo.log
mongod.exe --storageEngine mmapv1 --nojournal --dbpath=D:\\public\db --smallfiles --reinstall --serviceName MongoDB --serviceDisplayName MyMongoDB --logpath D:\\public\mongo.log
mongod.exe --storageEngine mmapv1 --nojournal --dbpath=D:\\public\db --smallfiles --reinstall --serviceName MongoDB --serviceDisplayName MyMongoDB --logpath D:\\public\mongo.log

https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/

db._adminCommand( {getCmdLineOpts: 1})
db.serverCmdLineOpts()
db.runCommand({whatsmyuri : 1})

#-------------------------------------------------- BEGIN [restore db] - (25-08-2017 - 12:18:02) {{
sudo service mongod stop
sudo mv mongodb /new/disk/mongodb/
sudo ln -s /new/disk/mongodb/ /var/lib/mongodb
sudo chown mongodb:mongodb /new/disk/mongodb/
sudo service mongod start

# test if mongodb user can access new location:
sudo -u mongodb -s cd /new/disk/mongodb/
# resolve other permissions issues if necessary
sudo usermod -a -G <newdisk_grp> mongodb
#-------------------------------------------------- END   [restore db] - (25-08-2017 - 12:18:02) }}


#-------------------------------------------------- BEGIN [home] - (25-08-2017 - 12:22:42) {{
$HOME/.mongorc.js
https://docs.mongodb.com/v3.2/aggregation/
#-------------------------------------------------- END   [home] - (25-08-2017 - 12:22:42) }}
#-------------------------------------------------- BEGIN [access] - (25-08-2017 - 12:25:33) {{
mongo --username <user> --password <pass> --host <host> --port 28015
mongo -u <user> -p <pass> --host <host> --port 28015
mongo --shell --norc alternate-environment.js

To execute a JavaScript file with authentication, with password prompted rather than provided on the command-line, use the following form:

mongo script-file.js -u <user> -p

To print return a query as JSON, from the system prompt using the --eval option, use the following form:

mongo --eval 'db.collection.find().forEach(printjson)'

https://docs.mongodb.com/v3.2/reference/method/
https://docs.mongodb.com/v3.2/reference/privilege-actions/
https://docs.mongodb.com/v3.2/tutorial/change-own-password-and-custom-data/

#-------------------------------------------------- END   [access] - (25-08-2017 - 12:25:33) }}

#-------------------------------------------------- BEGIN [move database] - (25-08-2017 - 12:42:41) {{




In debian/ubuntu, you'll need to edit the /etc/init.d/mongodb script. Really, this file should be pulling the settings from /etc/mongodb.conf but it doesn't seem to pull the default directory (probably a bug)

This is a bit of a hack, but adding these to the script made it start correctly:

add:

DBDIR=/database/mongodb

change:

DAEMON_OPTS=${DAEMON_OPTS:-"--unixSocketPrefix=$RUNDIR --config $CONF run"}

to:

DAEMON_OPTS=${DAEMON_OPTS:-"--unixSocketPrefix=$RUNDIR --dbpath $DBDIR --config $CONF run"}

#-------------------------------------------------- END   [move database] - (25-08-2017 - 12:42:41) }}
#-------------------------------------------------- BEGIN [promtp] - (25-08-2017 - 12:57:33) {{
host = db.serverStatus().host;

prompt = function() {
             return db+"@"+host+"$ ";
         }


prompt = function() {
           return "Uptime:"+db.serverStatus().uptime+" Documents:"+db.stats().objects+" > ";
         }

export EDITOR=vim
function myFunction () { }
edit myFunction
 myFunction
#-------------------------------------------------- END   [promtp] - (25-08-2017 - 12:57:33) }}

 enableLocalhostAuthBypass

    New in version 2.4.

    Available for both mongod and mongos.

    Specify 0 or false to disable localhost authentication bypass. Enabled by default.

    enableLocalhostAuthBypass is not available using setParameter database command. Use the setParameter option in the configuration file or the --setParameter option on the command line.
#-------------------------------------------------- BEGIN [manage users] - (25-08-2017 - 13:10:24) {{
db.auth()
use admin
db.createRole(
   { role: "changeOwnPasswordCustomDataRole",
     privileges: [
        {
          resource: { db: "", collection: ""},
          actions: [ "changeOwnPassword", "changeOwnCustomData" ]
        }
     ],
     roles: []
   }
)

use test
db.createUser(
   {
     user:"user123",
     pwd:"12345678",
     roles:[ "readWrite", { role:"changeOwnPasswordCustomDataRole", db:"admin" } ]
   }
)
###To grant an existing user the new role, use db.grantRolesToUser().
mongo --port 27017 -u user123 -p 12345678 --authenticationDatabase test

use test
db.updateUser(
   "user123",
   {
      pwd: "KNlZmiaNUp0B",
      customData: { title: "Senior Manager" }
   }
)
### modify


The following grantRolesToUser() operation gives accountUser01 the readWrite role on the products database and the read role on the stock database.

use products
db.grantRolesToUser(
   "accountUser01",
   [ "readWrite" , { role: "read", db: "stock" } ],
   { w: "majority" , wtimeout: 4000 }
)


use products
db.dropUser("reportUser1", {w: "majority", wtimeout: 5000})
use products
db.dropAllUsers( {w: "majority", wtimeout: 5000} )

use products
db.revokeRolesFromUser( "accountUser01",
                        [ { role: "read", db: "stock" }, "readWrite" ],
                        { w: "majority" }
                      )

use accounts
db.getUser("appClient")
db.getUsers()
db.runCommand( { usersInfo: 1 } )
db.runCommand(
               {
                 usersInfo:  { user: "mdy", db: "beBOT" },
                 showPrivileges: true
               }
)

db.getSiblingDB("home").runCommand(
                                    {
                                      usersInfo:  "Kari",
                                      showPrivileges: true
                                    }
)

#-------------------------------------------------- END   [manage users] - (25-08-2017 - 13:10:24) }}
#-------------------------------------------------- BEGIN [firewall] - (25-08-2017 - 15:02:17) {{
netsh advfirewall firewall add rule name="Open mongod port 27017" dir=in action=allow protocol=TCP localport=27017
netsh advfirewall firewall add rule name="Allowing mongod" dir=in action=allow program=" C:\Program Files\MongoDB\Server\3.4\bin\mongod.exe"
netsh advfirewall firewall add rule name="Allowing mongos" dir=in action=allow program=" C:\Program Files\MongoDB\Server\3.4\bin\mongos.exe"
netsh advfirewall firewall add rule name="Open mongod shard port 27018" dir=in action=allow protocol=TCP localport=27018

netsh advfirewall firewall add rule name="Open mongod shardsvr inbound" dir=in action=allow protocol=TCP remoteip=<ip-address> localport=27018
netsh advfirewall firewall add rule name="Open mongod shardsvr outbound" dir=out action=allow protocol=TCP remoteip=<ip-address> localport=27018

netsh advfirewall firewall delete rule name="Open mongod port 27017" protocol=tcp localport=27017
netsh advfirewall firewall delete rule name="Open mongod shard port 27018" protocol=tcp localport=27018

netsh advfirewall firewall show rule name=all
netsh advfirewall reset

netsh advfirewall export "C:\temp\MongoDBfw.wfw"
netsh advfirewall import "C:\temp\MongoDBfw.wfw"

#-------------------------------------------------- END   [firewall] - (25-08-2017 - 15:02:17) }}
#-------------------------------------------------- BEGIN [dump] - (25-08-2017 - 15:11:42) {{
mongodump  --db test --collection collection
mongodump  --db test --excludeCollection=users --excludeCollection=salaries
mongodump --host mongodb1.example.net --port 37017 --username user --password "pass" --out /opt/backup/mongodump-2011-10-24
mongodump --archive=test.20150715.archive --db test
mongodump --archive --db test --port 27017 | mongorestore --archive --port 27018
mongodump --gzip --db test
mongodump --archive=test.20150715.gz --gzip --db test

mongorestore --collection people --db accounts dump/
mongorestore --nsInclude accounts.people dump/
mongorestore --nsInclude 'transactions.*' --nsExclude 'transactions.*_dev' dump/
mongorestore --nsInclude 'data.*' --nsFrom 'data.$prefix$_$customer$' --nsTo '$customer$.$prefix$'
mongorestore --host mongodb1.example.net --port 37017 --username user --password "pass" /opt/backup/mongodump-2011-10-24
zcat /opt/backup/mongodump-2014-12-03/accounts.people.bson.gz | mongorestore --collection people --db accounts -
mongorestore --archive=test.20150715.archive --db test
mongodump --archive --db test --port 27017 | mongorestore --archive --port 27018
mongorestore --gzip --db test
mongorestore --gzip --archive=test.20150715.gz --db test
#-------------------------------------------------- END   [dump] - (25-08-2017 - 15:11:42) }}
#-------------------------------------------------- BEGIN [aommand line] - (25-08-2017 - 15:26:32) {{
 --storageEngine string
    Default: wiredTiger
    New in version 3.0.

    Changed in version 3.2: Starting in MongoDB 3.2, wiredTiger is the default.

    Specifies the storage engine for the mongod database. Available values include:
    Value 	Description
    mmapv1 	To specify the MMAPv1 Storage Engine.
    wiredTiger 	To specify the WiredTiger Storage Engine.
    inMemory

    To specify the In-Memory Storage Engine.


mongod --storageEngine inMemory --dbpath <path>
mongod --storageEngine inMemory --dbpath <path>  --inMemorySizeGB

Or, if using the YAML configuration file format:

storage:
   engine: inMemory
   dbPath: <path>
-------------------------------------------------------

storage:
   engine: inMemory
   dbPath: <path>
   inMemory:
      engineConfig:
         inMemorySizeGB: <newSize>

Or use the command-line option --inMemorySizeGB:

mongod --storageEngine inMemory --dbpath <path> --inMemorySizeGB <newSize>

---------------------------------------------

Replica Set

You can deploy mongod instances that use in-memory storage engine as part of a replica set. For example, as part of a three-member replica set, you could have:

    two mongod instances run with in-memory storage engine.
    one mongod instance run with WiredTiger storage engine. Configure the WiredTiger member as a hidden member (i.e. hidden: true and priority: 0).

------------------------------------



Sharded Cluster

You can deploy mongod instances that use in-memory storage engine as part of a sharded cluster. For example, in a sharded cluster, you could have one shard that has consists of the following replica set:

    two mongod instances run with in-memory storage engine
    one mongod instance run with WiredTiger storage engine. Configure the WiredTiger member as a hidden member (i.e. hidden: true and priority: 0).

To this shard, add the tag inmem. For example, if this shard has the name shardC, connect to the mongos and run sh.addShardTag().

For example,

sh.addShardTag("shardC", "inmem")

To the other shards, add a separate tag persisted .

sh.addShardTag("shardA", "persisted")
sh.addShardTag("shardB", "persisted")

For each sharded collection that should reside on the inmem shard, assign to the entire chunk range the tag inmem:

sh.addTagRange("test.analytics", { shardKey: MinKey }, { shardKey: MaxKey }, "inmem")

For each sharded collection that should resided across the persisted shards, assign to the entire chunk range the tag persisted:

sh.addTagRange("salesdb.orders", { shardKey: MinKey }, { shardKey: MaxKey }, "persisted")

For the inmem shard, create a database or move the database.
---------------------
{ setParameter: 1, <option>: <value> }
db.shutdownServer({timeoutSecs: 60});
#-------------------------------------------------- END   [aommand line] - (25-08-2017 - 15:26:32) }}
https://docs.mongodb.com/v3.2/reference/built-in-roles/

dbAdmin

    Provides the following actions on the database’s system.indexes, system.namespaces, and system.profile collections:

        collStats
        dbHash
        dbStats
        find
        killCursors
        listIndexes
        listCollections
        dropCollection and createCollection on system.profile only

    Changed in version 2.6.4: dbAdmin added the createCollection for the system.profile collection. Previous versions only had the dropCollection on the system.profile collection.

    Provides the following actions on all non-system collections. This role does not include full read access on non-system collections:

        bypassDocumentValidation
        collMod
        collStats
        compact
        convertToCapped
        createCollection
        createIndex
        dbStats
        dropCollection
        dropDatabase
        dropIndex
        enableProfiler
        reIndex
        renameCollectionSameDB
        repairDatabase
        storageDetails
        validate

dbOwner
userAdmin

    changeCustomData
    changePassword
    createRole
    createUser
    dropRole
    dropUser
    grantRole
    revokeRole
    viewRole
    viewUser

#-------------------------------------------------- BEGIN [disable javascript] - (25-08-2017 - 16:15:36) {{
Disable Server-Side Execution of JavaScript

You can disable all server-side execution of JavaScript, by passing the --noscripting option on the command line or setting security.javascriptEnabled in a configuration file.
#-------------------------------------------------- END   [disable javascript] - (25-08-2017 - 16:15:36) }}
#-------------------------------------------------- BEGIN [connectionstrings] - (25-08-2017 - 16:06:42) {{
mongodb://localhost
mongodb://sysop:moon@localhost
mongodb://myUser:myPassword@myHostIp/database
mongodb:///tmp/mongodb-27017.sock
replicasets

mongodb://db1.example.net,db2.example.com/?replicaSet=test
mongodb://localhost,localhost:27018,localhost:27019/?replicaSet=test
mongodb://example1.com,example2.com,example3.com/?replicaSet=test&readPreference=secondary
mongodb://example1.com,example2.com,example3.com/?replicaSet=test&w=2&wtimeoutMS=2000
mongodb://router1.example.com:27017,router2.example2.com:27017,router3.example3.com:27017/

---------------------------------------------------------------------------------
mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]
Example

To describe a connection to a replica set named test, with the following mongod hosts:

    db1.example.net on port 27017 and
    db2.example.net on port 2500.

You would use a connection string that resembles the following:

mongodb://db1.example.net,db2.example.net:2500/?replicaSet=test

For a replica set, specify the hostname of the mongod instance as listed in the replica set configuration.

Example

To describe a connection to a sharded cluster with the following mongos hosts:

    r1.example.net on port 27017 and
    r2.example.net on port 27017.

You would use a connection string that resembles the following:

mongodb://r1.example.net:27017,r2.example.net:27017/

#-------------------------------------------------- END   [connectionstrings] - (25-08-2017 - 16:06:42) }}
#-------------------------------------------------- BEGIN [javascriopt server side] - (25-08-2017 - 16:17:54) {{
mongo test --eval "printjson(db.getCollectionNames())"
mongo localhost:27017/test myjsfile.js
load("myjstest.js")
load("scripts/myjstest.js")

Shell Helpers	JavaScript Equivalents
show dbs, show databases	db.adminCommand('listDatabases')

use <db>	db = db.getSiblingDB('<db>')

show collections	db.getCollectionNames()

show users	db.getUsers()

show roles	db.getRoles({showBuiltinRoles: true})

show log <logname>	db.adminCommand({ 'getLog' : '<logname>' })

show logs	db.adminCommand({ 'getLog' : '*' })

it	cursor = db.collection.find()
	if ( cursor.hasNext() ){
	   cursor.next();
	}


#-------------------------------------------------- END   [javascriopt server side] - (25-08-2017 - 16:17:54) }}
#-------------------------------------------------- BEGIN [validations] - (25-08-2017 - 16:27:07) {{
https://docs.mongodb.com/manual/core/document-validation/
db.createCollection( "contacts",
   { validator: { $or:
      [
         { phone: { $type: "string" } },
         { email: { $regex: /@mongodb\.com$/ } },
         { status: { $in: [ "Unknown", "Incomplete" ] } }
      ]
   }
} )


Consider the following documents in a contacts collection:

{
   "_id": "125876",
   "name": "Anne",
   "phone": "+1 555 123 456",
   "city": "London",
   "status": "Complete"
},
{
   "_id": "860000",
   "name": "Ivan",
   "city": "Vancouver"
}



db.runCommand( {
   collMod: "contacts",
   validator: { $or: [ { phone: { $exists: true } }, { email: { $exists: true } } ] },
   validationLevel: "moderate"
} )

db.runCommand( {
   collMod: "contacts",
   validationLevel: "off"
} )

db.runCommand( {
   collMod: "contacts",
   validationLevel: "moderate"
} )



db.createCollection( "contacts",
   {
      validator: { $or:
         [
            { phone: { $type: "string" } },
            { email: { $regex: /@mongodb\.com$/ } },
            { status: { $in: [ "Unknown", "Incomplete" ] } }
         ]
      },
      validationAction: "warn"
   }
)
To disable validation entirely, you can set validationLevel to off.

db.runCommand( { collMod: "sessions",
                 index: { keyPattern: { lastAccess: 1 },
                          expireAfterSeconds: 3600
                        }
})

db.runCommand( { collMod: "contacts",
                 validator: { $or:
                    [
                       { phone: { $type: "string" } },
                       { email: { $regex: /@mongodb\.com$/ } },
                       { status: { $in: [ "Unknown", "Incomplete" ] } }
                    ]
                 },
                 validationLevel: "moderate",
                 validationAction: "warn"

} )

db.createCollection( "log", { capped: true, size: 100000 } )
db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )
db.cappedCollection.find().sort( { $natural: -1 } )
db.collection.isCapped()
db.runCommand({"convertToCapped": "mycoll", size: 100000});
#-------------------------------------------------- END   [validations] - (25-08-2017 - 16:27:07) }}
#-------------------------------------------------- BEGIN [privilege] - (25-08-2017 - 17:16:19) {{
https://docs.mongodb.com/manual/reference/privilege-actions/#bypassDocumentValidation
#-------------------------------------------------- END   [privilege] - (25-08-2017 - 17:16:19) }}
#-------------------------------------------------- BEGIN [store javascript] - (25-08-2017 - 17:21:55) {{
db.system.js.save(
   {
     _id: "echoFunction",
     value : function(x) { return x; }
   }
)

db.system.js.save(
   {
     _id : "myAddFunction" ,
     value : function (x, y){ return x + y; }
   }
);

db.loadServerScripts();

echoFunction(3);

myAddFunction(3, 5);
#-------------------------------------------------- END   [store javascript] - (25-08-2017 - 17:21:55) }}
db.restaurants.aggregate(
   [ { $match: { rating: { $lt: 5 } } } ],
   { readConcern: { level: "majority" } }
)

db.orders.aggregate(
                     [
                       { $match: { status: "A" } },
                       { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                       { $sort: { total: -1 } },
                       { $limit: 2 }
                     ],
                     {
                       cursor: { batchSize: 0 }
                     }
                   )



db.orders.aggregate(
                     [
                       { $match: { status: "A" } },
                       { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                       { $sort: { total: -1 } }
                     ],
                     {
                       explain: true
                     }
                   )
db.orders.aggregate([
                     { $match: { status: "A" } },
                     { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
                     { $sort: { total: -1 } }
                   ])

{ title : "Moby-Dick" ,
  author : "Herman Melville" ,
  published : 1851 ,
  ISBN : 0451526996 ,
  topics : [ "whaling" , "allegory" , "revenge" , "American" ,
    "novel" , "nautical" , "voyage" , "Cape Cod" ]
}

db.volumes.createIndex( { topics: 1 } )
db.volumes.findOne( { topics : "voyage" }, { title: 1 } )

https://docs.mongodb.com/v3.2/aggregation/
